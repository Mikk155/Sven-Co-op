{
	"CUtils g_Util":
	{
		"prefix": "g_Util",
		"body" : [ "g_Util" ],
		"description" : "Utility methods instance"
	},
	"bool g_Util.IsStringInFile( 'scripts/plugins/myblacklist.txt', string( g_Engine.mapname ) )":
	{
		"prefix": "g_Util.IsStringInFile( const string& in szPath, string& in szComparator )",
		"body" : [ "g_Util.IsStringInFile( const string& in szPath, string& in szComparator )" ],
		"description" : "Return true if 'szComparator' exist in the file 'szPath'"
	},
	"int g_Util.GetNumberOfEntities( const string& in szClassname )":
	{
		"prefix": "g_Util.GetNumberOfEntities( const string& in szClassname )",
		"body" : [ "g_Util.GetNumberOfEntities( const string& in szClassname )" ],
		"description" : "Return the current number of entities that exist in the world with that classname"
	},
	"void g_Util.SetCKV( CBaseEntity@ pEntity, string szKey, string szValue )":
	{
		"prefix": "g_Util.SetCKV( CBaseEntity@ pEntity, string szKey, string szValue )",
		"body" : [ "g_Util.SetCKV( CBaseEntity@ pEntity, string szKey, string szValue )" ],
		"description" : "Set custom keyvalue on target"
	},
	"string g_Util.GetCKV( CBaseEntity@ pEntity, string szKey )":
	{
		"prefix": "g_Util.GetCKV( CBaseEntity@ pEntity, string szKey )",
		"body" : [ "g_Util.GetCKV( CBaseEntity@ pEntity, string szKey )" ],
		"description" : "Get custom keyvalue's value as string"
	},
	"string g_Util.StringReplace( string_t FullSentence, dictionary@ pArgs )":
	{
		"prefix": "g_Util.StringReplace( string_t FullSentence, dictionary@ pArgs )",
		"body" : [ "g_Util.StringReplace( string_t FullSentence, dictionary@ pArgs )" ],
		"description" : "Replace Arguments from FullSentence"
	},
	"string g_Util.ShowMOTD( EHandle hPlayer, const string& in szTitle, const string& in szMessage )":
	{
		"prefix": "g_Util.ShowMOTD( EHandle hPlayer, const string& in szTitle, const string& in szMessage )",
		"body" : [ "g_Util.ShowMOTD( EHandle hPlayer, const string& in szTitle, const string& in szMessage )" ],
		"description" : "Show a MOTD popup to the target player"
	},
	"void bool g_Util.DebugMode( true )":
	{
		"prefix": "g_Util.DebugMode( true )",
		"body" : [ "g_Util.DebugMode( true )" ],
		"description" : "Enable function g_Util.DebugMessage( const string& in )"
	},
	"void g_Util.DebugMessage( const string& in szMessage )":
	{
		"prefix": "g_Util.DebugMessage( const string& in szMessage )",
		"body" : [ "g_Util.DebugMessage( const string& in szMessage )" ],
		"description" : "Show debugs if function g_Util.DebugMode( const bool& in ) is true"
	},
	"void g_Util.Trigger( string& in key, CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE& in useType = USE_TOGGLE, float& in flDelay = 0.0f )":
	{
		"prefix": "g_Util.Trigger( string& in key, CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE& in useType = USE_TOGGLE, float& in flDelay = 0.0f )",
		"body" : [ "g_Util.Trigger( string& in key, CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE& in useType = USE_TOGGLE, float& in flDelay = 0.0f )" ],
		"description" : "function FireTargets expanded for custom entities"
	},
	"bool g_Util.IsPluginInstalled( const string& in szPluginName )":
	{
		"prefix": "g_Util.IsPluginInstalled( const string& in szPluginName )",
		"body" : [ "g_Util.IsPluginInstalled( const string& in szPluginName )" ],
		"description" : "Return true if the plugin named 'szPluginName' is installed (Case-Sensitive)"
	},
	"array<string> g_Util.ScriptAuthor.insertLast( string )":
	{
		"prefix": "g_Util.ScriptAuthor.insertLast( string )",
		"body" : [ "g_Util.ScriptAuthor.insertLast( string )" ],
		"description" : "Show string as information when a player joins the server or type '/info'"
	},
	"array<string> g_Util.MapAuthor.insertLast( string )":
	{
		"prefix": "g_Util.MapAuthor.insertLast( string )",
		"body" : [ "g_Util.MapAuthor.insertLast( string )" ],
		"description" : "Add your STEAMID to appear in-game as 'Author' so people notify you about map bugs when they see you"
	},
	"mixin class ScriptBaseCustomEntity":
	{
		"prefix": "ScriptBaseCustomEntity",
		"body" : [ "ScriptBaseCustomEntity" ],
		"description" : "Allow your custom entity to use ScriptBaseCustomEntity"
	},
	"bool KeyValue( const string& in szKey, const string& in szValue )":
	{
		"prefix": "ExtraKeyValues( szKey, szValue )",
		"body" : [ "ExtraKeyValues( szKey, szValue )" ],
		"description" : "Allow your custom entity to use ScriptBaseCustomEntity supported features"
	},
	"bool ScriptBaseCustomEntity::master()":
	{
		"prefix": "master()",
		"body" : [ "master()" ],
		"description" : "return true if the entity's master state is OFF"
	},
	"void ScriptBaseCustomEntity::SetBoundaries()":
	{
		"prefix": "SetBoundaries()",
		"body" : [ "SetBoundaries()" ],
		"description" : "set entity's size by its brush model or by minhullsize & maxhullsize"
	},
	"KeyValue ScriptBaseCustomEntity::delay":
	{
		"prefix": "delay",
		"body" : [ "delay" ],
		"description" : "integer"
	},
	"KeyValue ScriptBaseCustomEntity::master":
	{
		"prefix": "master",
		"body" : [ "master" ],
		"description" : "Entity's master"
	},
	"KeyValue ScriptBaseCustomEntity::minhullsize":
	{
		"prefix": "minhullsize",
		"body" : [ "minhullsize" ],
		"description" : "minhullsize used to store a minimun Vector and set size with maxhullsize"
	},
	"KeyValue ScriptBaseCustomEntity::maxhullsize":
	{
		"prefix": "maxhullsize",
		"body" : [ "maxhullsize" ],
		"description" : "maxhullsize used to store a minimun Vector and set size with minhullsize"
	},
	"mixin class ScriptBaseLanguages":
	{
		"prefix": "ScriptBaseLanguages",
		"body" : [ "ScriptBaseLanguages" ],
		"description" : "Allow your custom entity to use ScriptBaseLanguages supported languages"
	},
	"bool ScriptBaseLanguages::KeyValue( const string& in szKey, const string& in szValue )":
	{
		"prefix": "Languages( szKey, szValue )",
		"body" : [ "Languages( szKey, szValue )" ],
		"description" : "Allow your custom entity to use ScriptBaseLanguages supported languages"
	},
	"string_t ScriptBaseLanguages::ReadLanguages( CBasePlayer@ pPlayer )":
	{
		"prefix": "ReadLanguages( pPlayer )",
		"body" : [ "ReadLanguages( pPlayer )" ],
		"description" : "Get player's custom keyvalue '$s_language' and return the string of the correct keyvalue, if empty return self.pev.message"
	},
	"KeyValue ScriptBaseLanguages::message_spanish":
	{
		"prefix": "message_spanish",
		"body" : [ "message_spanish" ],
		"description" : "ScriptBaseLanguages spanish (latam) keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_spanish2":
	{
		"prefix": "message_spanish2",
		"body" : [ "message_spanish2" ],
		"description" : "ScriptBaseLanguages spanish (spain) keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_portuguese":
	{
		"prefix": "message_portuguese",
		"body" : [ "message_portuguese" ],
		"description" : "ScriptBaseLanguages portuguese keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_german":
	{
		"prefix": "message_german",
		"body" : [ "message_german" ],
		"description" : "ScriptBaseLanguages german keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_french":
	{
		"prefix": "message_french",
		"body" : [ "message_french" ],
		"description" : "ScriptBaseLanguages french keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_italian":
	{
		"prefix": "message_italian",
		"body" : [ "message_italian" ],
		"description" : "ScriptBaseLanguages italian keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_esperanto":
	{
		"prefix": "message_esperanto",
		"body" : [ "message_esperanto" ],
		"description" : "ScriptBaseLanguages esperanto keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_czech":
	{
		"prefix": "message_czech",
		"body" : [ "message_czech" ],
		"description" : "ScriptBaseLanguages czech keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_dutch":
	{
		"prefix": "message_dutch",
		"body" : [ "message_dutch" ],
		"description" : "ScriptBaseLanguages dutch keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_indonesian":
	{
		"prefix": "message_indonesian",
		"body" : [ "message_indonesian" ],
		"description" : "ScriptBaseLanguages indonesian keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_romanian":
	{
		"prefix": "message_romanian",
		"body" : [ "message_romanian" ],
		"description" : "ScriptBaseLanguages romanian keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_turkish":
	{
		"prefix": "message_turkish",
		"body" : [ "message_turkish" ],
		"description" : "ScriptBaseLanguages turkish keyvalue"
	},
	"KeyValue ScriptBaseLanguages::message_albanian":
	{
		"prefix": "message_albanian",
		"body" : [ "message_albanian" ],
		"description" : "ScriptBaseLanguages albanian keyvalue"
	}	
}