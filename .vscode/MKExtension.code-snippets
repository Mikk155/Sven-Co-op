{
    "Extension": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "Extension"
        ],
        "description": "[MKExtension plugin] Extension workspace",
        "body": "/**\n\t[MKExtension plugin] \n**/\nnamespace Extensions\n{\n    namespace ${1:Extension name}\n    {\n        // You can register your own logger but idealy do after the plugin is being propertly registered.\n        CLogger@ Logger;\n\n        /**\n        *   This is obligatory and must be the namespace in string form.\n        **/\n        string GetName()\n        {\n            return \"${2:Extension name}\";\n        }\n\n        /**\n        *   Called when the extension is initialized\n        *   @info\n        *       ExtensionIndex: Contains the index for the current extension if needed to notice server ops to update the installation hierarchy.\n        **/\n        void OnExtensionInit( Hooks::IExtensionInit@ info )\n        {\n            @Logger = CLogger( \"${3:Logger name}\" );\n            Logger.info( \"Registered \\\"\" + GetName() + \"\\\" at index \\\"\" + info.ExtensionIndex + \"\\\"\" );\n        }\n    }\n}"
    },
    "HookCode::Continue": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "HookCode::Continue"
        ],
        "description": "[MKExtension plugin] Continue calling other hooks",
        "body": "/**\n\t[MKExtension plugin] \n**/HookCode::Continue"
    },
    "HookCode::Break": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "HookCode::Break"
        ],
        "description": "[MKExtension plugin] Stop iteration to prevent subsequent extension's hooks from being called",
        "body": "/**\n\t[MKExtension plugin] \n**/HookCode::Break"
    },
    "HookCode::Handle": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "HookCode::Handle"
        ],
        "description": "[MKExtension plugin] Handle vanilla and metamod plugins. equivalent to HOOK_HANDLED",
        "body": "/**\n\t[MKExtension plugin] \n**/HookCode::Handle"
    },
    "HookCode::Supercede": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "HookCode::Supercede"
        ],
        "description": "[MKExtension plugin] Handle the original game's call (metamod API only)",
        "body": "/**\n\t[MKExtension plugin] \n**/HookCode::Supercede"
    },
    "OnPluginInit": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnPluginInit"
        ],
        "description": "[MKExtension plugin] Called when all extensions has been initialized. this is the last action in the plugin's PluginInit method.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnPluginInit( Hooks::IHookInfo@ info )\n{\n    ${1:}\n}"
    },
    "OnMapActivate": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnMapActivate"
        ],
        "description": "[MKExtension plugin] Called by MapActivate.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnMapActivate( Hooks::IMapActivate@ info )\n{\n    // Number of entities in the world (only BSP)\n    int numb_ents = info.NumberOfEntities;\n    ${1:}\n}"
    },
    "OnMapChange": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnMapChange"
        ],
        "description": "[MKExtension plugin] Called when the map is changing",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnMapChange( Hooks::IMapChange@ info )\n{\n    // map name the game is changing to\n    string map = info.NextMap;\n    ${1:}\n}"
    },
    "OnMapInit": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnMapInit"
        ],
        "description": "[MKExtension plugin] Called by MapInit.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnMapInit( Hooks::IHookInfo@ info )\n{\n    ${1:}\n}"
    },
    "OnMapStart": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnMapStart"
        ],
        "description": "[MKExtension plugin] Called by MapStart.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnMapStart( Hooks::IHookInfo@ info )\n{\n    ${1:}\n}"
    },
    "OnMapThink": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnMapThink"
        ],
        "description": "[MKExtension plugin] Called every server frame starting after MapActivate until the map is changing.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnMapThink( Hooks::IHookInfo@ info )\n{\n    ${1:}\n}"
    },
    "OnPluginExit": {
        "scope": "angelscript",
        "prefix": [
            "mkextension",
            "extension",
            "Hook",
            "OnPluginExit"
        ],
        "description": "[MKExtension plugin] Called by PluginExit.",
        "body": "/**\n\t[MKExtension plugin] \n**/\nvoid OnPluginExit( Hooks::IHookInfo@ info )\n{\n    ${1:}\n}"
    }
}